[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]] # icons
repo = 'ryanoasis/vim-devicons'
hook_add = '''
    let g:webdevicons_enable_nerdtree = 1
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
    let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
    let g:WebDevIconsOS = 'Darwin'
    " let g:webdevicons_conceal_nerdtree_brackets = 0
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
let g:fugitive_no_maps = 1

autocmd MyAutoCmd WinEnter * if exists('b:git_dir') | let g:git_dir = b:git_dir | endif

autocmd MyAutoCmd BufRead,BufNewFile * if exists('g:git_dir') | let b:git_dir = g:git_dir | endif

command! -nargs=0 Gv call s:vsplit_fugitive()

function! s:vsplit_fugitive()
    :belowright vertical G
endfunction

'''

[[plugins]]
repo = 'mhartington/oceanic-next'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\   'active': {
\       'left': [
\           ['mode', 'paste'],
\           ['readonly', 'filename', 'modified', 'gitstatus', 'gitstatusbuffer'],
\           ['cocstatusdiagnostic'],
\       ],
\       'right': [
\           [ 'lineinfo' ], [ 'percent'],
\           [ 'fileformat', 'fileencoding', 'filetype' ]
\       ]
\   },
\   'component_function':{
\      'wordcount': 'WordCount',
\      'fugitive': 'LightLineFugitive',
\      'readonly': 'LightLineReadonly',
\      'modified': 'LightLineModified',
\      'filename': 'LightLineFilename',
\      'filetype': 'LightLineFiletype',
\      'fileformat': 'LightLineFileformat',
\      'cocstatus': 'CocStatus',
\      'cocstatusdiagnostic': 'CocStatusDiagnostic',
\      'currentfunction': 'CocCurrentFunction',
\      'gitstatus': 'GitStatusGlobal',
\      'gitstatusbuffer': 'GitStatusBuffer',
\   },
\   'colorscheme': 'oceanicnext',
\   'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
\   'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
\}

function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

function! CocStatus() abort
    return get(g:, 'coc_status', '')
endfunction

function! GitStatusGlobal()
    return get(g:, 'coc_git_status', '')
endfunction

function! GitStatusBuffer()
    let l:msg = get(b:, 'coc_git_status', '')
    return msg[2:-2]
endfunction

function! CocStatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, g:coc_status_error_sign . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, g:coc_status_warning_sign . info['warning'])
  endif
  return join(msgs, ' ')
endfunction

function! LightLineModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! LightLineReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return "\uf023"
    else
        return ""
    endif
endfunction

function! LightLineFugitive()
    if exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? "\ue725 "._ : ''
    endif
    return ''
endfunction

function! LightLineFilename()
    return ('' != expand('%:p') ? winwidth(0) > 70 ? expand('%:~:.') : expand('%:t') : '[No Name]')
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

" hide --INSERT--
set noshowmode

'''

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
    let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.erb,*.php,*.vue,*.js'
    let g:closetag_filetypes = 'html,xhtml,phtml,erb,php,vue,javascript'
'''

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
let g:floaterm_position = 'topright'

let g:floaterm_keymap_toggle = '\\'
let g:floaterm_winblend = 10
let g:floaterm_width = 0.5
let g:floaterm_height = 0.5
let g:floaterm_gitcommit = 'split'
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
let g:coc_status_error_sign = "\uf00d"
let g:coc_status_warning_sign = "\uf12a"

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  call CocAction('doHover')
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

augroup MyCoc
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
    call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
    call submode#map('bufmove', 'n', '', '>', '<C-w>>')
    call submode#map('bufmove', 'n', '', '<', '<C-w><')
    call submode#map('bufmove', 'n', '', '+', '<C-w>+')
    call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'

[[plugins]]
repo = 'antoinemadec/coc-fzf'
depends = ['fzf', 'fzf.vim', 'coc.nvim']

[[plugins]]
repo = 'jremmen/vim-ripgrep'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''

let g:vista_icon_indent = ['╰─▸ ', '├─▸ ']
let g:vista_echo_cursor = 0

let vista#renderer#enable_icon = 1

let g:vista_default_executive = 'coc'

nnoremap <silent> <Space>t :<C-u>Vista!!<CR>

autocmd MyAutoCmd FileType vista,vista_kind nnoremap <buffer><silent> / :<c-u>call vista#finder#fzf#Run()<CR>
'''

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
"let g:context_filetype#filetypes = {
"\'vue': [
"\  {
"\     'start': '^<template.*>',
"\     'end': '^<\/template>',
"\     'filetype': 'html'
"\  }
"\]
"\}
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add = '''
    let g:fern#renderer = "devicons"
'''
depends = 'fern.vim'

[[plugins]]
repo = 'lambdalisue/fern-mapping-project-top.vim'
depends = 'fern.vim'

[[plugins]]
repo = 'LumaKernel/fern-mapping-fzf.vim'
depends = ['fzf', 'fern.vim']
hook_add = '''
let s:bin_dir = g:cache_dir . '/dein/repos/github.com/junegunn/fzf.vim/bin/preview.sh'
let s:preview_command = s:bin_dir .' {}'
let g:fern#mapping#fzf#fzf_options = {'options': ['--layout=reverse', '--info=inline', '--preview', s:preview_command]}
'''

[[plugins]]
repo = 'bumaociyuan/vim-swift'

[[plugins]]
repo = 'vim-jp/vital.vim'
merged = 0

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''

let bookmark_file = '~/.vim-startify-bookmarks'
if filereadable(expand(bookmark_file)) == v:false
  execute ":redir! > " . bookmark_file
    :silent! echon '~/dotfiles/vimrc/init.vim' . "\n"
    :silent! echon '~/dotfiles/vimrc/dein/dein.toml' . "\n"
    :silent! echon bookmark_file . "\n"
  :redir END
endif

function! GetUniqueSessionName()

  let coc_explorer_bufnr = bufnr('coc-explorer')
  if coc_explorer_bufnr != -1
    execute 'bdelete ' coc_explorer_bufnr
  endif

  let path = fnamemodify(getcwd(), ':~:t')
  let path = empty(path) ? 'no-project' : path
  let branch = gitbranch#name()
  let branch = empty(branch) ? '' : '-' . branch
  return substitute(path . branch, '/', '-', 'g')
endfunction

autocmd VimLeavePre * silent execute 'SSave! ' . GetUniqueSessionName()

let g:startify_change_to_vcs_root = 1
let g:startify_bookmarks = systemlist('cat ' . bookmark_file)

let g:startify_skiplist = ["~/.cache/nvim/"]

set sessionoptions-=help
'''

[[plugins]]
repo = 'itchyny/vim-gitbranch'

