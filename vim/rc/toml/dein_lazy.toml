[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
    let g:NERDTreeShowLineNumbers = 1
    let g:NERDTreeWinSize = 25
    "nmap <Space>n :NERDTreeToggle<CR>
    nmap <leader>f :NERDTreeFind<Space>
    autocmd MyAutoCmd StdinReadPre * let s:std_in=1
    autocmd MyAutoCmd VimEnter * if (argc() == 0 && !exists("s:std_in")) | :NERDTreeToggle | endif
    autocmd MyAutoCmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | quit | endif
'''
on_event = 'VimEnter'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
    nmap <Space>n :NERDTreeTabsToggle<CR>
    let g:nerdtree_tabs_open_on_console_startup=1
'''
on_source = 'nerdtree'

[[plugins]]
repo = 'preservim/nerdcommenter'
hook_source = '''
    nmap <Space>c <Plug>NERDCommenterToggle
    smap <Space>c <Plug>NERDCommenterToggle
    xmap <Space>c <Plug>NERDCommenterToggle

    let g:NERDSpaceDelims = 1
    let g:NERDDefaultAlign = 'left'

    let g:NERDCustomDelimiters = {
            \ 'c': {'left': '//', 'leftAlt': '/**', 'rightAlt': '*/'},
            \ 'gp': {'left': '#'}
            \}
'''
# on_i = 1
on_event = ['BufEnter']

[[plugins]]
repo = 'kana/vim-submode'
hook_post_source = '''
    call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
    call submode#map('bufmove', 'n', '', '>', '<C-w>>')
    call submode#map('bufmove', 'n', '', '<', '<C-w><')
    call submode#map('bufmove', 'n', '', '+', '<C-w>+')
    call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''
on_i = 1

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'severin-lemaignan/vim-minimap'
on_i = 1

[[plugins]]
repo = 'Shougo/denite.nvim'
on_event = 'VimEnter'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_source = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space><Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
endfunction
'''
on_source = 'denite.nvim'

# [[plugins]]
# repo = 'yuttie/comfortable-motion.vim'
# on_i = 1

#
 # [[plugins]]
# repo = 'hisaknown/nanomap.vim'
# on_i = 1


[[plugins]]
repo = 'edkolev/tmuxline.vim'
on_i = 1
hook_source = '''
    " let g:tmuxline_powerline_separators = 0
    let g:tmuxline_theme = 'lightline'
    " let g:tmuxline_preset = 'tmux'
    " let g:tmuxline_preset = {
    "       \'a'    : '#S',
    "       \'c'    : ['#(whoami)', '#(uptime | cut -d " " -f 1,2,3)'],
    "       \'win'  : ['#I', '#W'],
    "       \'cwin' : ['#I', '#W', '#F'],
    "       \'x'    : '#(date)',
    "       \'y'    : ['%R', '%a', '%Y'],
    "       \'z'    : '#H'}
'''



# [[plugins]]
# repo = 'junegunn/fzf.vim'
# depends = 'fzf'
# on_event = 'VimEnter'
# on_i = 1
