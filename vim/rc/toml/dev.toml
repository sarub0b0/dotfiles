[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <silent><C-k> <Plug>(neosnippet_expand_or_jump)
    smap <silent><C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <silent><C-k> <Plug>(neosnippet_expand_target)

    "imap <expr><C-k> neosnippet#expandable_or_jumpable() ?
    "    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<C-n>"
    "smap <expr><C-k> neosnippet#expandable_or_jumpable() ?
    "    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<C-n>"

    "let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1

    "autocmd MyAutoCmd CompleteDone * call neosnippet#complete_done()
 '''
depends = ['neosnippet-snippets']
on_ft = 'snippet'
on_event = 'InsertCharPre'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})

    let g:quickrun_config['_'] = {
                \   'runner': 'vimproc',
                \   'runner/vimproc/updatetime': 60,
                \   'outputter': 'error',
                \   'outputter/error/success': 'quickfix',
                \   'outputter/error/error': 'quickfix',
                \   'outputter/buffer/close_on_empty': 1,
                \   'outputter/buffer/split': 'botright 7',
                \   'outputter/quickfix/open_cmd': 'copen 7',
                \   'outputter/loclist/open_cmd': 'botright lopen 7',
                \}

    let g:quickrun_config['allegro'] = {
                \   'command': 'clang',
                \   'cmdopt': '-g `pkg-config --cflags --libs allegro-5 allegro_acodec-5 allegro_audio-5 allegro_color-5 allegro_dialog-5 allegro_font-5 allegro_image-5 allegro_main-5 allegro_memfile-5 allegro_physfs-5 allegro_primitives-5 allegro_ttf-5`',
                \   'exec': '%c %o %s:p -o %s:p:r',
                \}
    let g:quickrun_config['allegro/cpp'] = {
                \   'command': 'clang++',
                \   'cmdopt': '-g `pkg-config --cflags --libs allegro-5 allegro_acodec-5 allegro_audio-5 allegro_color-5 allegro_dialog-5 allegro_font-5 allegro_image-5 allegro_main-5 allegro_memfile-5 allegro_physfs-5 allegro_primitives-5 allegro_ttf-5`',
                \   'exec': '%c %o %s:p -o %s:p:r',
                \}

    let g:quickrun_no_default_key_mappings = 1
'''
hook_add = '''
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
    nmap <Space>r :cclose<CR>:write<CR>:QuickRun<Space>
    xmap <Space>r :<C-U>cclose<CR>:<C-U>write<CR>gv:QuickRun<Space>
'''
on_if = 1
depends = ['vimproc.vim']

[[plugins]]
repo = 'majutsushi/tagbar'
hook_source = '''
    let g:tagbar_width = 30
    let g:tagbar_autoshowtag = 1
    " let g:tagbar_autofocus = 1
    let g:tagbar_show_linenumbers = 1
    let g:tagbar_sort = 0
'''
hook_add = '''
    nmap <Space>t :TagbarToggle<CR>
'''
on_if = 1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    " Use deoplete.
    let g:deoplete#enable_at_startup = 1
'''
hook_source = '''
    " Use smartcase.
    call deoplete#custom#option('smart_case', v:true)
    call deoplete#custom#option('camel_case', v:true)

    call deoplete#custom#option('keyword_patterns', {
                \   'tex': '\\?[a-zA-Z_]\w*',
                \})

    "call deoplete#custom#option('sources', {
    "             \   '_': ['buffer', 'tag', 'file', 'omni'],
    "             \   'c': ['buffer', 'tag'],
    "             \   'cpp': ['buffer', 'tag'],
    "             \   'tex': ['buffer', 'tag', 'omni'],
    "             \   'ruby': ['buffer', 'omni'],
    "             \})

    "call deoplete#custom#var('omni', 'input_patterns', {
    "            \ 'ruby': ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::'],
    "            \ 'java': '[^. *\t]\.\w*',
    "            \ 'php': '\w+|[^. \t]->\w*|\w+::\w*',
    "            \})

    " Change clang binary path
    if has('mac')
        call deoplete#custom#var('clangx', 'clang_binary', '/usr/local/opt/llvm/bin/clang')
    endif

    " Change clang options
    call deoplete#custom#var('clangx', 'default_c_options', '')
    call deoplete#custom#var('clangx', 'default_cpp_options', '')

    call deoplete#custom#source('omni', 'functions', {
                \ 'ruby':  'rubycomplete#Complete',
    "             \ 'tex':  'vimtex#complete#omnifunc',
                \})

    call deoplete#custom#source('_', 'converters', [
          \ 'converter_remove_paren',
          \ 'converter_remove_overlap',
          \ 'matcher_length',
          \ 'converter_truncate_abbr',
          \ 'converter_truncate_menu',
          \ 'converter_auto_delimiter',
          \ ])

    call deoplete#custom#source('_', 'matchers', ['matcher_head'])

    " <TAB>: completion.
    " inoremap <silent><expr> <TAB>
    "             \ pumvisible() ? "\<C-n>" :
    "             \ <SID>check_back_space() ? "\<TAB>" :
    "             \ deoplete#manual_complete()

    " function! s:check_back_space() abort
    "     let col = col('.') - 1
    "     return !col || getline('.')[col - 1]  =~ '\s'
    " endfunction

    " <S-TAB>: completion back.
    " inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    "inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

    " <CR>: close popup and save indent.
    "inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    "function! s:my_cr_function() abort
    "    return deoplete#close_popup() . "\<CR>"
    "endfunction

'''
on_i = 1

[[plugins]]
repo = 'sarub0b0/lldb.nvim'
on_ft = ['c', 'cpp']
