[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets' behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    " imap <expr><TAB>
    "  \ pumvisible() ? "\<C-n>" :
    "  \ neosnippet#expandable_or_jumpable() ?
    "  \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    " smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    "  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif

    " Enable snipMate compatibility feature.
    " let g:neosnippet#enable_snipmate_compatibility = 1

    " Expand the completed snippet trigger by <CR>.
    "imap <expr><CR>
    "\ (pumvisible() && neosnippet#expandable()) ?
    "\ "\<Plug>(neosnippet_expand)" : "\<CR>"

    '''
depends = ['neosnippet-snippets']
on_ft = 'snippet'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})

    let g:quickrun_config['_'] = {
                \   'runner': 'vimproc',
                \   'runner/vimproc/updatetime': 60,
                \   'outputter': 'error',
                \   'outputter/error/success': 'quickfix',
                \   'outputter/error/error': 'quickfix',
                \   'outputter/buffer/close_on_empty': 1,
                \   'outputter/buffer/split': 'botright 7',
                \   'outputter/quickfix/open_cmd': 'copen 7',
                \   'outputter/loclist/open_cmd': 'botright lopen 7',
                \}

    let g:quickrun_config['allegro'] = {
                \   'command': 'clang',
                \   'cmdopt': '-g `pkg-config --cflags --libs allegro-5 allegro_acodec-5 allegro_audio-5 allegro_color-5 allegro_dialog-5 allegro_font-5 allegro_image-5 allegro_main-5 allegro_memfile-5 allegro_physfs-5 allegro_primitives-5 allegro_ttf-5`',
                \   'exec': '%c %o %s:p -o %s:p:r',
                \}
    let g:quickrun_config['allegro/cpp'] = {
                \   'command': 'clang++',
                \   'cmdopt': '-g `pkg-config --cflags --libs allegro-5 allegro_acodec-5 allegro_audio-5 allegro_color-5 allegro_dialog-5 allegro_font-5 allegro_image-5 allegro_main-5 allegro_memfile-5 allegro_physfs-5 allegro_primitives-5 allegro_ttf-5`',
                \   'exec': '%c %o %s:p -o %s:p:r',
                \}

    let g:quickrun_no_default_key_mappings = 1
'''
hook_add = '''
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
    nmap <Space>r :cclose<CR>:write<CR>:QuickRun<Space>
    xmap <Space>r :<C-U>cclose<CR>:<C-U>write<CR>gv:QuickRun<Space>
'''
on_i = 1
depends = ['vimproc.vim']

[[plugins]]
repo = 'majutsushi/tagbar'
hook_source = '''
    let g:tagbar_width = 30
    let g:tagbar_autoshowtag = 1
    " let g:tagbar_autofocus = 1
    let g:tagbar_show_linenumbers = 1
    let g:tagbar_sort = 0
'''
hook_add = '''
    nmap <Space>t :TagbarToggle<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    " let g:deoplete#auto_complete_start_length = 2
    " let g:deoplete#enable_camel_case = 0
    " let g:deoplete#enable_refresh_always = 1
    " let g:deoplete#file#enable_buffer_path = 1
    " let g:deoplete#max_list = 100
    " let g:deoplete#num_processes = 2

    "set completeopt=longest

    "inoremap <expr><tab> pumvisible() ? "\<C-n>" :
    "    \ neosnippet#expandable_or_jumpable() ?
    "    \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
on_i = 1


