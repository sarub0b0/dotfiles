[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]] # icons
repo = 'ryanoasis/vim-devicons'
hook_add = '''
    let g:webdevicons_enable_nerdtree = 1
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
    let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
    let g:WebDevIconsOS = 'Darwin'
    " let g:webdevicons_conceal_nerdtree_brackets = 0
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
    let g:NERDTreeLimitedSyntax  =  1
'''

[[plugins]]
repo = 'mhartington/oceanic-next'

# [[plugins]]
# repo = 'cocopon/iceberg.vim'

# [[plugins]]
# repo = 'ayu-theme/ayu-vim'


# [[plugins]]
# repo = 'dense-analysis/ale'
# hook_add = '''
#     " エラー行に表示するマーク
#     " let g:ale_sign_error = '⨉'
#     " let g:ale_sign_warning = '⚠'

#     let g:ale_sign_error = "\uf00d"
#     let g:ale_sign_warning = "\uf12a"

#     " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
#     let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

#     " エラー表示の列を常時表示
#     let g:ale_sign_column_always = 0

#     " メッセージフォーマット
#     let g:ale_statusline_format = ["\uf00d %d", "\uf12a %d", "\uf00c"]
#     " ファイルを開いたときにlint実行
#     let g:ale_lint_on_enter = 0

#     " ファイルを保存したときにlint実行
#     let g:ale_lint_on_save = 1

#     " 編集中のlintはしない
#     let g:ale_lint_on_text_changed = 0

#     let g:ale_lint_on_insert_leave = 0

#     " ファイルを保存したときにfix実行
#     let g:ale_fix_on_save = 1

#     " lint結果をロケーションリストとQuickFixには表示しない
#     " 出てると結構うざいしQuickFixを書き換えられるのは困る
#     let g:ale_set_loclist = 0
#     let g:ale_set_quickfix = 1
#     let g:ale_open_list = 1
#     let g:ale_keep_list_window_open = 0

#     let s:hostname = system('uname')
#     if s:hostname =~ "Linux"
#         let g:ale_linters = {
#             \ 'c': ['gcc'],
#             \}
#     else
#         "let g:ale_linters = {
#         "\   'c': ['clang'],
#         "\   'cpp': ['clang'],
#         ""\   'cpp': ["clangtidy"],
#         "\}
#     endif

#     let g:ale_linters = {
#             \'c': ['clang'],
#             \'cpp': ['clang'],
#             \'html': ['eslint'],
#             \'javascript': ['eslint'],
#             \'css': ['eslint'],
#             \'vue': ['eslint'],
#             \}
#     let g:ale_fixers = {
#             \'html': ['prettier'],
#             \'css': ['prettier'],
#             \'yaml': ['prettier'],
#             \'javascript': ['eslint'],
#             \'vue': ['eslint'],
#             \}
# '''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\   'active': {
\       'left': [
\           ['mode', 'paste'],
\           ['readonly', 'filename', 'modified', 'currentfunction', 'cocstatus', 'cocstatusdiagnostic'],
\       ],
\       'right': [
\           [ 'lineinfo' ], [ 'percent'],
\           [ 'fileformat', 'fileencoding', 'filetype' ]
\       ]
\   },
\   'component_function':{
\      'wordcount': 'WordCount',
\      'fugitive': 'LightLineFugitive',
\      'readonly': 'LightLineReadonly',
\      'modified': 'LightLineModified',
\      'filename': 'LightLineFilename',
\      'filetype': 'LightLineFiletype',
\      'fileformat': 'LightLineFileformat',
\      'cocstatus': 'CocStatus',
\      'cocstatusdiagnostic': 'CocStatusDiagnostic',
\      'currentfunction': 'CocCurrentFunction'
\   },
\   'colorscheme': 'oceanicnext',
\   'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
\   'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
\}

function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

function! CocStatus() abort
    return get(g:, 'coc_status', '')
endfunction

function! CocStatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, g:coc_status_error_sign . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, g:coc_status_warning_sign . info['warning'])
  endif
  return join(msgs, ' ')
endfunction

function! LightLineModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! LightLineReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return "\uf023"
    else
        return ""
    endif
endfunction

function! LightLineFugitive()
    if exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? "\ue725 "._ : ''
    endif
    return ''
endfunction

function! LightLineFilename()
    return ('' != expand('%:p') ? winwidth(0) > 70 ? expand('%:~:.') : expand('%:t') : '[No Name]')
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
" ------------------------
"function! LightLineTabFilename(n)
"    return ('' != expand('%:p') ? winwidth(0) > 70 ? expand('%:~:.') : expand('%:t') : '[No Name]')
"endfunction

"function! LightLineTabFiletype(n)
"    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
"endfunction

"function! LightLineTabFileformat(n)
"  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
"endfunction


" hide --INSERT--
set noshowmode

'''
# depends = ['lightline-ale']

# [[plugins]]
# repo = 'maximbaz/lightline-ale'

# [[plugins]]
# repo = 'itchyny/calendar.vim'
# hook_add = '''
#     let g:calendar_google_calendar = 1
#     let g:calendar_google_task = 1
# '''

# [[plugins]]
# repo = 'rizzatti/dash.vim'
# hook_add = 'nmap <silent> <Leader>d <Plug>DashSearch'


# [[plugins]]
# repo = 'junegunn/fzf'
# build = './install --all'
# merged = 0

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
    let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.erb,*.php,*.vue'
    let g:closetag_filetypes = 'html,xhtml,phtml,erb,php,vue'
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
let g:floaterm_position = 'topright'

let g:floaterm_keymap_new    = '<F7>'
let g:floaterm_keymap_prev   = '<F8>'
let g:floaterm_keymap_next   = '<F9>'
let g:floaterm_keymap_toggle = '<F10>'
'''
