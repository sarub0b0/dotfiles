[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]] # icons
repo = 'ryanoasis/vim-devicons'
hook_add = '''
    let g:webdevicons_enable_nerdtree = 1
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
    let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
    let g:WebDevIconsOS = 'Darwin'
    " let g:webdevicons_conceal_nerdtree_brackets = 0
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
    let g:NERDTreeLimitedSyntax  =  1
'''

[[plugins]]
repo = 'mhartington/oceanic-next'

[[plugins]]
repo = 'cocopon/iceberg.vim'


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    " エラー行に表示するマーク
    " let g:ale_sign_error = '⨉'
    " let g:ale_sign_warning = '⚠'

    let g:ale_sign_error = "\uf00d"
    let g:ale_sign_warning = "\uf12a"

    " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

    " エラー表示の列を常時表示
    let g:ale_sign_column_always = 0

    " メッセージフォーマット
    let g:ale_statusline_format = ["\uf00d %d", "\uf12a %d", "\uf00c"]
    " ファイルを開いたときにlint実行
    let g:ale_lint_on_enter = 0

    " ファイルを保存したときにlint実行
    let g:ale_lint_on_save = 1

    " 編集中のlintはしない
    let g:ale_lint_on_text_changed = 0

    let g:ale_lint_on_insert_leave = 0

    " lint結果をロケーションリストとQuickFixには表示しない
    " 出てると結構うざいしQuickFixを書き換えられるのは困る
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    let g:ale_open_list = 1
    let g:ale_keep_list_window_open = 0

    let s:hostname = system('uname')
    if s:hostname =~ "Linux"
        let g:ale_linters = {
            \ 'c': ['gcc'],
            \}
    else
        "let g:ale_linters = {
        "\   'c': ['clang'],
        "\   'cpp': ['clang'],
        ""\   'cpp': ["clangtidy"],
        "\}
    endif

'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \   'active': {
    \       'left': [
    \           ['mode', 'paste'],
    \           ['readonly', 'filename', 'modified'],
    \           [ 'linter_errors', 'linter_warnings', 'linter_ok' ]
    \       ],
    \       'right': [
    \           [ 'lineinfo' ], [ 'percent'],
    \           [ 'fileformat', 'fileencoding', 'filetype' ]
    \       ]
    \   },
    \   'component_function':{
    \      'wordcount': 'WordCount',
    \      'fugitive': 'LightLineFugitive',
    \      'readonly': 'LightLineReadonly',
    \      'modified': 'LightLineModified',
    \      'filename': 'LightLineFilename',
    \      'filetype': 'LightLineFiletype',
    \      'fileformat': 'LightLineFileformat',
    \   },
    \   'colorscheme': 'oceanicnext',
    "\   'colorscheme': 'iceberg',
    \   'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \   'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
    \   'component_expand': {
    \       'linter_warnings': 'lightline#ale#warnings',
    \       'linter_errors': 'lightline#ale#errors',
    \       'linter_ok': 'lightline#ale#ok',
    \   },
    \   'component_type': {
    \       'linter_warnings': 'warning',
    \       'linter_errors': 'error',
    \       'linter_ok': 'left',
    \   }
    \}

    "let g:lightline.tab = {
    "    \ 'active': [ 'tabnum', 'filename', 'filetype', 'modified' ],
    "    \ 'inactive': [ 'tabnum', 'filename', 'filetype', 'modified' ]
    "    \}
    "let g:lightline.tab_component_function = {
    "    \    'filename': 'LightLineTabFilename',
    "    \    'filetype': 'LightLineTabFiletype',
    "    \    'fileformat': 'LightLineTabFileformat',
    "\}

    "let g:lightline.tabline = {
    "    \ 'left': [ [ 'tabs' ] ],
    "    \ 'right': [ [ 'close' ] ] }

    let g:lightline#ale#indicator_warnings = "\uf12a"
    let g:lightline#ale#indicator_errors = "\uf00d"
    let g:lightline#ale#indicator_ok = "\uf00c"

    function! LightLineModified()
        if &filetype == "help"
            return ""
        elseif &modified
            return "+"
        elseif &modifiable
            return ""
        else
            return ""
        endif
    endfunction

    function! LightLineReadonly()
        if &filetype == "help"
            return ""
        elseif &readonly
            return "\uf023"
        else
            return ""
        endif
    endfunction

    function! LightLineFugitive()
        if exists("*fugitive#head")
            let _ = fugitive#head()
            return strlen(_) ? "\ue725 "._ : ''
        endif
        return ''
    endfunction

    function! LightLineFilename()
        return ('' != expand('%:p') ? winwidth(0) > 70 ? expand('%:~:.') : expand('%:t') : '[No Name]')
    endfunction

    function! LightLineFiletype()
      return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
    endfunction

    function! LightLineFileformat()
      return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
    endfunction
    " ------------------------
    "function! LightLineTabFilename(n)
    "    return ('' != expand('%:p') ? winwidth(0) > 70 ? expand('%:~:.') : expand('%:t') : '[No Name]')
    "endfunction

    "function! LightLineTabFiletype(n)
    "    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
    "endfunction

    "function! LightLineTabFileformat(n)
    "  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
    "endfunction


    " hide --INSERT--
    set noshowmode
'''
depends = ['lightline-ale']

[[plugins]]
repo = 'maximbaz/lightline-ale'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1
'''

[[plugins]]
repo = 'rizzatti/dash.vim'
hook_add = 'nmap <silent> <Leader>d <Plug>DashSearch'


[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0
